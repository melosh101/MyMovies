name: Release Go Binary

on:
  push:
    branches:
      - main # or master, depending on your default branch

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is required to create a release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for commit message generation

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.25' # Updated to match go.mod

      - name: Build Go binary
        run: |
          # The name of your binary
          GO_BINARY_NAME="server" 
          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -o ${GO_BINARY_NAME}-linux-amd64 .
          GOOS=windows GOARCH=amd64 go build -o ${GO_BINARY_NAME}-windows-amd64.exe .

      - name: Generate release info
        id: release_info
        run: |
          # Get the latest commit hash (short)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          # Get the latest commit message (first line only)
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          
          # Create tag name with timestamp and commit hash
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TAG_NAME="release-${TIMESTAMP}-${COMMIT_HASH}"
          
          # Get commits since last release (fallback to all commits if no previous release)
          LAST_RELEASE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_RELEASE_TAG" ]; then
            COMMIT_RANGE="${LAST_RELEASE_TAG}..HEAD"
          else
            # Get total commit count and use all commits if less than 10, otherwise last 10
            TOTAL_COMMITS=$(git rev-list --count HEAD)
            if [ $TOTAL_COMMITS -le 10 ]; then
              COMMIT_RANGE="--all"
            else
              COMMIT_RANGE="HEAD~10..HEAD"
            fi
          fi
          
          # Generate release body with commit history
          echo "## Changes since last release" > release_body.md
          echo "" >> release_body.md
          if [ "$COMMIT_RANGE" = "--all" ]; then
            git log --pretty=format:'- %s (%h)' --reverse >> release_body.md
          else
            git log ${COMMIT_RANGE} --pretty=format:'- %s (%h)' --reverse >> release_body.md
          fi
          
          # Set outputs
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "release_name=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          
          # Read the release body into output (handling multiline)
          {
            echo 'release_body<<EOF'
            cat release_body.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.release_name }}
          body: ${{ steps.release_info.outputs.release_body }}
          draft: false
          prerelease: false
          files: |
            server-linux-amd64
            server-windows-amd64.exe
